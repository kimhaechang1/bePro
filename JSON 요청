번호.요청url
요청:
Get or POST
파라메터(name: 예시값)
응답:
응답JSON
예)
1. /user/signout
요청:
Get
Id: id
응답:
{
        signOutSuccess : true or false,
        msg : 로그아웃에 성공했습니다, 실패했습니다(오류내용).
}
-----------------------------------

1. /user/signin ✅
설명 : 로그인이랑 같으며, 로컬스토리지에 저장 할 유저정보를 함께 얻어옴
요청 : POST
id : id
pw : pw
응답 : 
{
        loginSuccess : true or false,
        nick : 닉네임,
        id : 사용자 아이디,
        email : 사용자 이메일,
        isPro : true or false // 전공자 이냐 아니냐,
        major : major // 전공 명,
        msg : 로그인에 성공했습니다. 비밀번호가 틀렸습니다 (비번틀렸을 시). 알 수 없는 이유로 로그인에 실패했습니다.(그 외 이유로 로그인 실패 시),
        cookie : jwt token 등등
        
}

2. /user/signout ✅
요청 : POST
{ id : id }
응답 : 
{
        signOutSuccess : true or false,
        msg : 로그아웃에 성공했습니다. 알 수 없는 이유로 실패했습니다.(그 외의 이유로 로그아웃 실패 시)
}

3. /user/signup ✅
요청 : POST
{
        id : id
        email : email
        pw : pw
        nick : nick 
        isPro : true or false // 전공자 이냐 아니냐
        major : major // 전공 명
}

응답 : 
{
        signUpSuccess : true or false,
        msg : 회원가입에 성공했습니다. 알 수 없는 이유로 실패했습니다.(그 외의 이유로 회원가입 실패 시)
}

4. /user/idcheck ✅
요청 : POST

{
        id : id
}

응답 : 
{
        idCheckSuccess : true or false,
        msg : 사용해도 좋습니다. 중복된 아이디가 존재합니다. 알 수 없는 이유로 실패했습니다.(그 외의 이유로 중복체크 실패 시)
}

5. /get/hashtag ✅
요청 : GET
응답 : 
[
        {name : "해시태그 명"},
        {name : "해시태그 명"}
]


6. /search ✅
요청 : POST
{
        inputValue : inputValue
        hashTags : hashTags // Array
}

응답 : 
[
        {
                title : 제목,
                tags : [] 태그배열,
                id : 고유인덱스번호,
                uploaderNick : 글쓴사람 닉네임,
                detail : 글 내용,
                view : 조회수,
                uploadtime : 글쓴 날짜,
                like : 좋아요 수
                category : 게시판 종류
        },
        {
                ...
        }
        ...
]

7. /board/main ✅
설명 : 게시판에 따라 최신 10개 글 들고오기
요청 : POST
{
        board:qna or notice (qna : QnA글, notice : 공지사항 글)
}
응답 : 
[
        {
                title : 제목,
                id : 고유인덱스번호,
                uploaderNick : 글쓴사람 닉네임,
                view : 조회수,
                uploadtime : 글쓴 날짜,
                like : 좋아요 수
        },
        ...
] 

8. /board/list ✅
설명 : 게시판에 따라 글목록 제공 (일단 전부, 최신순)
요청 : POST
{
        board:qna or notice (qna : QnA글, notice : 공지사항 글)
}
응답 : 
[
        {
                title : 제목,
                id : 고유인덱스번호,
                uploaderNick : 글쓴사람 닉네임,
                view : 조회수,
                uploadtime : 글쓴 날짜,
                like : 좋아요 수
        },
        ...
]

9. /get/mainviewdec ✅
설명 : QnA 글 조회수 내림차순으로 10개
요청 : GET
응답 : 
[
        {
                title : 제목,
                id : 고유인덱스번호,
                uploaderNick : 글쓴사람 닉네임,
                view : 조회수,
                uploadtime : 글쓴 날짜,
                like : 좋아요 수
        },
        ...
]

10. /board/view ✅
설명 : 게시판에 따라 상세내용 받기
요청 : POST
{
        id : id, // 고유 인덱스번호
        board : qna or notice // qna : QnA글, notice : 공지사항 글
}
응답 :
if(qna)
        {
                title : 제목,
                id : 고유인덱스번호,
                uploaderNick : 글쓴사람 닉네임,
                uploaderId : 글쓴사람 아이디,
                view : 조회수,
                uploadtime : 글쓴날짜,
                like : 좋아요 수
                detail : 글 내용
                tags : [] 태그배열
                comment : [
                        {
                                commentDetail : 댓글 내용,
                                commentUploadTime : 댓글 쓴 날짜,
                                isAnony : 익 댓인지 아닌지,
                                commentNick : 댓글 쓴 사용자 닉네임
                                commentId : 댓글 쓴 사람 아이디
                                commentIndex : 댓글 고유 인덱스
                        },
                ]
        }

else if(notice)
        {
                title : 제목,
                id : 고유인덱스번호,
                uploaderNick, 글쓴사람 닉네임,
                view : 조회수
                uploadtime : 글쓴날짜,
                like : 좋아요 수
                detail : 글 내용
        }


11. /get/hashtagrank ✅
설명 : 해쉬태그 순위 내림차순으로 10개만
요청 : GET
응답 : 
["# 컴퓨터 공학과", "# C언어",...]

12. /post/qna ✅
설명 : qna글 추가
요청 : POST
{
        title : 해당 글제목,
        tag : 해당 글 태그 배열,
        detail : 해당 글 내용,
        uploaderId : 글쓴사람 아이디,
}
응답 : 
msg : "글이 저장되었습니다" or "오류로 인해 저장에 실패했습니다."


13. /post/notice ✅
설명 : 공지사항 글 추가
요청 : POST
{
        title : 해당 글제목,
        detail : 해당 글 내용,
        uploaderId : 글쓴사람 아이디,
}
응답 : 
msg : "글이 저장되었습니다" or "오류로 인해 저장에 실패했습니다."

14. /update/qna ✅
설명 : qna글 업데이트
요청 : POST
{
        title : 해당 글제목,
        tag : 해당 글 태그 배열,
        detail : 해당 글 내용,
        uploaderId : 글쓴사람 아이디,
        id : 글 고유 인덱스번호
}
응답 : 
msg : "글이 수정되었습니다" or "오류로 인해 수정에 실패했습니다."

14. /update/notice ✅
설명 : 공지사항글 업데이트
요청 : POST
{
        title : 해당 글제목,
        detail : 해당 글 내용,
        uploaderId : 글쓴사람 아이디,
        id : 글 고유 인덱스번호
}
응답 : 
msg : "글이 수정되었습니다" or "오류로 인해 수정에 실패했습니다."

15. /auth 
설명 : 권한 검증
요청 : POST
{
        id : id // 현재 로그인 된 아이디 값
        index : index // 해당 글 고유 인덱스번호
        token : token // 현재 로그인 된 토큰 값
        cate : post or comment // 현재 수정을 하려하는 부분이 게시판인가 댓글인가
        isEdit : true or false // true 면 현재 주어진 아이디가 해당 글 고유 인덱스 번호를 통해 조회한 글쓴이 아이디와 동일한지 검사한다.
        isSignin : true or false // true 면 현재 주어진 아이디가 로그인 된 사용자인지 검사해야함. 즉, 해당 아이디에 대한 토큰이 발행되어있어야 함과 동시에 두개의 토큰값이 일치해야함
        isAdmin : true or false // true 면 현재 주어진 아이디가 해당 아이디가 어드민 권한이 있는지 검사해야함
}
응답 :
{
        signinAuth : true or false 실제 로그인 된 사용자인지 검증
        editAuth : true or false // true면 로그인된 유저가 글쓴이, false면 아님
        adminAuth : true or false // true면 admin, false면 user,
}



16. /user/userupdate

설명 : 마이페이지 유저 정보 업데이트

요청 : POST
{
        id : id
        email : email
        pw : pw // 공백일 경우 비밀번호 변경 X
        nick : nick 
        isPro : true or false // 전공자 이냐 아니냐
        major : major // 전공 명
}
응답 : 
{
        msg : 업데이트에 성공했습니다 or 업데이트에 실패했습니다.
}


17. /user/getpostings

설명 : 마이페이지 사용자 글 조회

요청 : POST
{
        id : id // 로그인된 아이디
}

응답 : 
[
        {
                title : 제목,
                id : 고유인덱스번호,
                view : 조회수
                uploadtime : 글쓴날짜,
                like : 좋아요 수,
                detail : 글 내용,
                tags : [] 태그배열,
                category : 게시판 종류
        }
]

18. /comment/update
설명 : 댓글 업데이트
요청 : POST
{
        commentIndex : 댓글 고유 인덱스
        commentDetail : 댓글 내용,
}
응답 : 
{
        msg : 업데이트에 성공했습니다. or 실패했습니다.
}

19. /comment/new
설명 : 댓글 등록
요청 : POST
{
        id : 글 고유 인덱스
        commentDetail : 댓글 내용,
        isAnony : 익 댓인지 아닌지,
        commentNick : 댓글 쓴 사용자 닉네임
        commentId : 댓글 쓴 사람 아이디
}
응답 : 
{
        msg : 댓글 등록에 성공했습니다. or 실패했습니다.
}

20. /comment/delete
설명 : 댓글 삭제
요청 : POST
{
        commentIndex : 댓글 고유 인덱스,
        commentId : 댓글 쓴사람 ID
}
응답 : 
{
        msg : 성공적으로 삭제되었습니다. or 실패했습니다.
}